Python Object
===============
对象机制
---------
1. python中对象机制的核心只有两点p18

2. 当我们谈论python对象时，要关注两个struct及各自存储的内容（为什么会有如此分离的设计？）

- 对象本身，保存在“对象类型”的定义中，例如PyIntObject定义了整数对象
- 对象元信息，保存在对象对应的“类型对象”中，包括的元信息有p31

其实，无论在“交互模式”还是在“.py模式”使用python时，我们无时不刻不是在访问对象及其元信息：

.. code-block:: python
	:linenos:

	#访问的是静态的整数对象的定义PyIntObject中的属性ob_ival
	>>>a = 1
	#访问的是元信息，即“类型对象”中的属性int_doc
	>>>print(a.__doc__)

类型对象
---------
- 每个类型对象其实就是一个PyTypeObject实例
- 类型对象就是面向对象理论中“类”这个概念的实现

.. _obj-behavior:

对象的行为
^^^^^^^^^^^
什么叫“对象的行为”？5+6，a['key'], b[0]等等

为什么数值型、序列型和关联型对象有如此不同的行为？由类型对象中三个函数指针所指向的“函数族”的实现情况决定p23

python允许数值型对象拥有关联型对象的行为吗？允许的，从客户端代码的表现形式就是p23 图1-4；从底层实现来看，p24第一段

对象的静态实现
---------------
+--------------+------------+--+
| 静态对象定义 | 类型对象   |  |
+--------------+------------+--+
| PyIntObject  | PyInt_Type |  |
+--------------+------------+--+
|              |            |  |
+--------------+------------+--+

1. 为什么像js， python这样的语言，把一切都当成对象呢？连类型都是“类型对象” p15

2. 为什么python中的“内建类型对象”都是被静态初始化的？意味着它们不在内存的堆栈区，而是在全局区（静态区）p16

对象的运行时
------------
1. 为什么几乎所有的内建对象，都有自己特有的“对象池机制”？

- 缓解因采用“引用计数机制”，“系统堆”会面临着对象访问瓶颈，p17
- 对象并非独立对象，而是通过一定结构连接在一起的庞大的对象系统